name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-gcc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with GCC (with warnings)
      run: gcc -Wall -Wextra -o hello hello.c
      
    - name: Run unit tests
      run: make unit-test
      
    - name: Run validation tests
      run: bash test/validate.sh --quiet
      
  build-and-test-clang:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with Clang
      run: clang -Wall -Wextra -o hello_clang hello.c
      
    - name: Test Clang build
      run: ./hello_clang
      
    - name: Run unit tests with Clang
      run: |
        clang -Wall -Wextra -Wpedantic -Wformat=2 -Wconversion -Wsign-conversion -Werror -std=c99 -I. -c -o hello_lib.o hello.c -DUNIT_TEST
        clang -Wall -Wextra -Wpedantic -Wformat=2 -Wconversion -Wsign-conversion -Werror -std=c99 -I. -o test_hello_runner test/test_hello.c hello_lib.o
        ./test_hello_runner
        rm -f hello_lib.o test_hello_runner

  collaborative-editor-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run basic collaborative editor tests
      run: ./test_collab.sh
      
    - name: Run OT correctness tests (fast)
      run: node test-ot.js
      
    - name: Test backward compatibility
      run: |
        make test
        echo "‚úÖ Original functionality preserved"
        
    - name: Test server startup (smoke test)
      timeout-minutes: 5
      run: |
        # Set up proper cleanup on exit
        cleanup() {
          echo "üßπ Cleaning up background processes..."
          if [ ! -z "$SERVER_PID" ] && kill -0 $SERVER_PID 2>/dev/null; then
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
          fi
          # Kill any remaining node processes for safety
          pkill -f "node collab_server.js" 2>/dev/null || true
          # Ensure port is free
          netstat -tln | grep ":8082" || echo "Port 8082 is free"
        }
        trap cleanup EXIT
        
        # Start server with controlled startup
        echo "üöÄ Starting collaborative editor server..."
        node collab_server.js &
        SERVER_PID=$!
        
        # Verify process started successfully
        if ! kill -0 $SERVER_PID 2>/dev/null; then
          echo "‚ùå Failed to start server process"
          exit 1
        fi
        
        echo "üìä Server PID: $SERVER_PID"
        
        # Robust health check with exponential backoff
        echo "üîç Waiting for server to become ready..."
        TIMEOUT=30
        RETRY_COUNT=0
        MAX_RETRIES=15
        BACKOFF=1
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f -s --max-time 3 http://localhost:8082/health > /dev/null 2>&1; then
            echo "‚úÖ Server health check passed (attempt $((RETRY_COUNT + 1)))"
            break
          fi
          
          # Check if server process is still alive
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚ùå Server process died during startup"
            exit 1
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "‚è≥ Health check attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in ${BACKOFF}s..."
          sleep $BACKOFF
          
          # Exponential backoff (max 4s)
          if [ $BACKOFF -lt 4 ]; then
            BACKOFF=$((BACKOFF + 1))
          fi
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Server failed to start within ${TIMEOUT}s"
            echo "üìã Final process check:"
            ps aux | grep node || true
            netstat -tln | grep ":808" || true
            exit 1
          fi
        done
        
        # Verify server is responding correctly and localhost-only
        echo "üîç Verifying server configuration..."
        HEALTH_RESPONSE=$(curl -s --max-time 5 http://localhost:8082/health)
        echo "üìä Health response: $HEALTH_RESPONSE"
        
        if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
          echo "‚úÖ Server responding with healthy status"
        else
          echo "‚ùå Server not reporting healthy status"
          exit 1
        fi
        
        # Verify server is localhost-only (should fail from external access)
        echo "üîí Verifying localhost-only binding..."
        if netstat -tln | grep ":8082" | grep -v "127.0.0.1:8082"; then
          echo "‚ùå Server may be binding to non-localhost interfaces"
          netstat -tln | grep ":8082"
          exit 1
        else
          echo "‚úÖ Server properly bound to localhost only"
        fi
        
        echo "‚úÖ Server startup smoke test completed successfully"

  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Optional for faster CI pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive security tests
      run: node test-security.js

  metrics-tool-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build metrics tool with strict flags
      run: gcc -Wall -Wextra -Wpedantic -Wformat=2 -Wconversion -Wsign-conversion -Werror -std=c99 -o metrics metrics.c
      
    - name: Test metrics tool help
      run: ./metrics --help
      
    - name: Test metrics tool basic analysis
      run: ./metrics hello.c
      
    - name: Test metrics tool with line analysis
      run: ./metrics --lines hello.c
      
    - name: Test metrics tool CSV export
      run: |
        ./metrics --csv hello.c
        test -f hello.c_metrics.csv
        rm -f hello.c_metrics.csv
      
    - name: Run comprehensive metrics test suite
      run: bash test/test_metrics.sh
