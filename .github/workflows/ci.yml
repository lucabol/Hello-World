name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-gcc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with GCC (with warnings)
      run: gcc -Wall -Wextra -o hello hello.c
      
    - name: Run validation tests
      run: bash test/validate.sh --quiet
      
  build-and-test-clang:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with Clang
      run: clang -Wall -Wextra -o hello_clang hello.c
      
    - name: Test Clang build
      run: ./hello_clang

  collaborative-editor-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run collaborative editor tests
      run: ./test_collab.sh
      
    - name: Run comprehensive security tests
      run: node test-comprehensive.js
      
    - name: Test backward compatibility
      run: |
        make test
        echo "✅ Original functionality preserved"
        
    - name: Test server startup (smoke test)
      run: |
        # Start server in background with proper process management
        npm start &
        SERVER_PID=$!
        
        # Robust health check with retry loop
        echo "Waiting for server startup..."
        TIMEOUT=30
        RETRY_COUNT=0
        MAX_RETRIES=15
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f -s http://localhost:8082/health > /dev/null 2>&1; then
            echo "✅ Server health check passed"
            break
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Health check attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in 2s..."
          sleep 2
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Server failed to start within ${TIMEOUT}s"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
        done
        
        # Verify server is responding correctly
        HEALTH_RESPONSE=$(curl -s http://localhost:8082/health)
        echo "Health response: $HEALTH_RESPONSE"
        
        if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
          echo "✅ Server responding with healthy status"
        else
          echo "❌ Server not reporting healthy status"
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        fi
        
        # Clean shutdown
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true
        echo "✅ Server startup smoke test completed"
