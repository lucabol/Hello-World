name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Standard GCC build with original validation workflow
  build-and-test-gcc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with GCC (with warnings)
      run: gcc -Wall -Wextra -o hello hello.c
      
    - name: Run validation tests
      run: bash test/validate.sh --quiet
      
  # Standard Clang build with binary validation (equivalent to GCC validation)
  build-and-test-clang:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with Clang (with warnings)
      run: clang -Wall -Wextra -o hello_clang hello.c
      
    - name: Run validation tests (Clang)
      run: bash test/validate-binary.sh ./hello_clang --quiet

  # Comprehensive cross-compiler validation with strict flags
  # Uses -Werror to ensure code quality - builds may fail on new warnings
  cross-compiler-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: 
          - { name: gcc, binary: hello_gcc_strict, command: "gcc -Wall -Wextra -Wpedantic -Werror -o hello_gcc_strict hello.c" }
          - { name: clang, binary: hello_clang_strict, command: "clang -Wall -Wextra -Wpedantic -Werror -o hello_clang_strict hello.c" }
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build with ${{ matrix.compiler.name }} (strict warnings)
      run: ${{ matrix.compiler.command }}
      
    - name: Run comprehensive validation (${{ matrix.compiler.name }})
      run: bash test/validate-binary.sh ./${{ matrix.compiler.binary }} --quiet
